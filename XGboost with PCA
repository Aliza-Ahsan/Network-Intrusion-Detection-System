{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a8b693a2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:41.308431Z",
     "iopub.status.busy": "2025-06-05T12:32:41.307527Z",
     "iopub.status.idle": "2025-06-05T12:32:44.761964Z",
     "shell.execute_reply": "2025-06-05T12:32:44.760846Z"
    },
    "papermill": {
     "duration": 3.464053,
     "end_time": "2025-06-05T12:32:44.764798",
     "exception": false,
     "start_time": "2025-06-05T12:32:41.300745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import accuracy_score\n",
    "import itertools\n",
    "from tabulate import tabulate\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import itertools\n",
    "from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.metrics import accuracy_score, classification_report, log_loss\n",
    "import xgboost as xgb\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "042843b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:44.776476Z",
     "iopub.status.busy": "2025-06-05T12:32:44.775947Z",
     "iopub.status.idle": "2025-06-05T12:32:44.783015Z",
     "shell.execute_reply": "2025-06-05T12:32:44.781895Z"
    },
    "papermill": {
     "duration": 0.015515,
     "end_time": "2025-06-05T12:32:44.785567",
     "exception": false,
     "start_time": "2025-06-05T12:32:44.770052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load the training and test datasets\n",
    "train_url = 'https://raw.githubusercontent.com/merteroglu/NSL-KDD-Network-Instrusion-Detection/master/NSL_KDD_Train.csv'\n",
    "test_url = 'https://raw.githubusercontent.com/merteroglu/NSL-KDD-Network-Instrusion-Detection/master/NSL_KDD_Test.csv'\n",
    "col_names = [\"duration\",\"protocol_type\",\"service\",\"flag\",\"src_bytes\",\n",
    "    \"dst_bytes\",\"land\",\"wrong_fragment\",\"urgent\",\"hot\",\"num_failed_logins\",\n",
    "    \"logged_in\",\"num_compromised\",\"root_shell\",\"su_attempted\",\"num_root\",\n",
    "    \"num_file_creations\",\"num_shells\",\"num_access_files\",\"num_outbound_cmds\",\n",
    "    \"is_host_login\",\"is_guest_login\",\"count\",\"srv_count\",\"serror_rate\",\n",
    "    \"srv_serror_rate\",\"rerror_rate\",\"srv_rerror_rate\",\"same_srv_rate\",\n",
    "    \"diff_srv_rate\",\"srv_diff_host_rate\",\"dst_host_count\",\"dst_host_srv_count\",\n",
    "    \"dst_host_same_srv_rate\",\"dst_host_diff_srv_rate\",\"dst_host_same_src_port_rate\",\n",
    "    \"dst_host_srv_diff_host_rate\",\"dst_host_serror_rate\",\"dst_host_srv_serror_rate\",\n",
    "    \"dst_host_rerror_rate\",\"dst_host_srv_rerror_rate\",\"label\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "908d87e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:44.797268Z",
     "iopub.status.busy": "2025-06-05T12:32:44.796825Z",
     "iopub.status.idle": "2025-06-05T12:32:45.702578Z",
     "shell.execute_reply": "2025-06-05T12:32:45.701172Z"
    },
    "papermill": {
     "duration": 0.915042,
     "end_time": "2025-06-05T12:32:45.705197",
     "exception": false,
     "start_time": "2025-06-05T12:32:44.790155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimensions of the Training set: (125973, 42)\n",
      "Dimensions of the Test set: (22544, 42)\n"
     ]
    }
   ],
   "source": [
    "train = pd.read_csv(train_url, header=None, names=col_names)\n",
    "test = pd.read_csv(test_url, header=None, names=col_names)\n",
    "print('Dimensions of the Training set:',train.shape)\n",
    "print('Dimensions of the Test set:',test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7b11170f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:45.716195Z",
     "iopub.status.busy": "2025-06-05T12:32:45.715644Z",
     "iopub.status.idle": "2025-06-05T12:32:45.775296Z",
     "shell.execute_reply": "2025-06-05T12:32:45.773681Z"
    },
    "papermill": {
     "duration": 0.068021,
     "end_time": "2025-06-05T12:32:45.777912",
     "exception": false,
     "start_time": "2025-06-05T12:32:45.709891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label\n",
      "normal       67343\n",
      "anomalous    58630\n",
      "Name: count, dtype: int64\n",
      "\n",
      "label\n",
      "anomalous    12833\n",
      "normal        9711\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Label adjustment\n",
    "train[\"label\"] = train[\"label\"].apply(lambda x: \"normal\" if x == \"normal\" else \"anomalous\")\n",
    "test[\"label\"] = test[\"label\"].apply(lambda x: \"normal\" if x == \"normal\" else \"anomalous\")\n",
    "# Checking the distribution after the change\n",
    "print(train[\"label\"].value_counts())\n",
    "print()\n",
    "print(test[\"label\"].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e2376182",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:45.789521Z",
     "iopub.status.busy": "2025-06-05T12:32:45.788646Z",
     "iopub.status.idle": "2025-06-05T12:32:45.920879Z",
     "shell.execute_reply": "2025-06-05T12:32:45.919530Z"
    },
    "papermill": {
     "duration": 0.140893,
     "end_time": "2025-06-05T12:32:45.923564",
     "exception": false,
     "start_time": "2025-06-05T12:32:45.782671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicate rows: 9\n"
     ]
    }
   ],
   "source": [
    "print(f\"Number of duplicate rows: {train.duplicated().sum()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "79dfff45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:45.934729Z",
     "iopub.status.busy": "2025-06-05T12:32:45.934280Z",
     "iopub.status.idle": "2025-06-05T12:32:45.964661Z",
     "shell.execute_reply": "2025-06-05T12:32:45.963249Z"
    },
    "papermill": {
     "duration": 0.039048,
     "end_time": "2025-06-05T12:32:45.967446",
     "exception": false,
     "start_time": "2025-06-05T12:32:45.928398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicate rows: 3\n"
     ]
    }
   ],
   "source": [
    "print(f\"Number of duplicate rows: {test.duplicated().sum()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b9415da6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:45.978951Z",
     "iopub.status.busy": "2025-06-05T12:32:45.978508Z",
     "iopub.status.idle": "2025-06-05T12:32:46.020260Z",
     "shell.execute_reply": "2025-06-05T12:32:46.019034Z"
    },
    "papermill": {
     "duration": 0.050061,
     "end_time": "2025-06-05T12:32:46.022510",
     "exception": false,
     "start_time": "2025-06-05T12:32:45.972449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New shape of the dataset: (22541, 42)\n"
     ]
    }
   ],
   "source": [
    "# Removing duplicate rows\n",
    "test.drop_duplicates(inplace=True)\n",
    "\n",
    "# Check the shape of the dataset after removing duplicates\n",
    "print(f\"New shape of the dataset: {test.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "790c95ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:46.034815Z",
     "iopub.status.busy": "2025-06-05T12:32:46.034381Z",
     "iopub.status.idle": "2025-06-05T12:32:46.181069Z",
     "shell.execute_reply": "2025-06-05T12:32:46.179804Z"
    },
    "papermill": {
     "duration": 0.15561,
     "end_time": "2025-06-05T12:32:46.183872",
     "exception": false,
     "start_time": "2025-06-05T12:32:46.028262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New shape of the dataset: (125964, 42)\n"
     ]
    }
   ],
   "source": [
    "# Removing duplicate rows\n",
    "train.drop_duplicates(inplace=True)\n",
    "\n",
    "# Check the shape of the dataset after removing duplicates\n",
    "print(f\"New shape of the dataset: {train.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d45c4877",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:46.195544Z",
     "iopub.status.busy": "2025-06-05T12:32:46.195153Z",
     "iopub.status.idle": "2025-06-05T12:32:46.219083Z",
     "shell.execute_reply": "2025-06-05T12:32:46.217811Z"
    },
    "papermill": {
     "duration": 0.033082,
     "end_time": "2025-06-05T12:32:46.221951",
     "exception": false,
     "start_time": "2025-06-05T12:32:46.188869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns with the same value across all rows: ['num_outbound_cmds']\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming df is your DataFrame\n",
    "def check_constant_columns(test):\n",
    "    constant_columns = [col for col in test.columns if test[col].nunique() == 1]\n",
    "    return constant_columns\n",
    "\n",
    "# Example usage\n",
    "constant_cols = check_constant_columns(test)\n",
    "if constant_cols:\n",
    "    print(f\"Columns with the same value across all rows: {constant_cols}\")\n",
    "else:\n",
    "    print(\"No columns have the same value across all rows.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3ee49d6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:46.233885Z",
     "iopub.status.busy": "2025-06-05T12:32:46.233456Z",
     "iopub.status.idle": "2025-06-05T12:32:46.259466Z",
     "shell.execute_reply": "2025-06-05T12:32:46.258065Z"
    },
    "papermill": {
     "duration": 0.035217,
     "end_time": "2025-06-05T12:32:46.262317",
     "exception": false,
     "start_time": "2025-06-05T12:32:46.227100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Dropping a column because every value is 0 \n",
    "train.drop(['num_outbound_cmds'], axis=1, inplace=True)\n",
    "test.drop(['num_outbound_cmds'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0c7237b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:46.274848Z",
     "iopub.status.busy": "2025-06-05T12:32:46.274426Z",
     "iopub.status.idle": "2025-06-05T12:32:46.393806Z",
     "shell.execute_reply": "2025-06-05T12:32:46.392436Z"
    },
    "papermill": {
     "duration": 0.129093,
     "end_time": "2025-06-05T12:32:46.396423",
     "exception": false,
     "start_time": "2025-06-05T12:32:46.267330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Apply LabelEncoding\n",
    "def LabelEncoding(df):\n",
    "    for col in df.columns:\n",
    "        if df[col].dtype == 'object':\n",
    "            label_encoder = LabelEncoder()\n",
    "            df[col] = label_encoder.fit_transform(df[col])\n",
    "\n",
    "LabelEncoding(train)\n",
    "LabelEncoding(test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d6c24e39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:46.407943Z",
     "iopub.status.busy": "2025-06-05T12:32:46.407547Z",
     "iopub.status.idle": "2025-06-05T12:32:46.425181Z",
     "shell.execute_reply": "2025-06-05T12:32:46.423927Z"
    },
    "papermill": {
     "duration": 0.026133,
     "end_time": "2025-06-05T12:32:46.427588",
     "exception": false,
     "start_time": "2025-06-05T12:32:46.401455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = train.drop([\"label\"], axis=1)\n",
    "y_train = train[\"label\"]\n",
    "X_test = test.drop([\"label\"], axis=1)\n",
    "y_test = test[\"label\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "51166242",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:46.439078Z",
     "iopub.status.busy": "2025-06-05T12:32:46.438662Z",
     "iopub.status.idle": "2025-06-05T12:32:47.950667Z",
     "shell.execute_reply": "2025-06-05T12:32:47.949161Z"
    },
    "papermill": {
     "duration": 1.522931,
     "end_time": "2025-06-05T12:32:47.955529",
     "exception": false,
     "start_time": "2025-06-05T12:32:46.432598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Apply PCA for dimensionality reduction (keeping 95% variance)\n",
    "pca = PCA(n_components=20)\n",
    "X_train= pca.fit_transform(X_train)\n",
    "X_test = pca.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8478178e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:47.989210Z",
     "iopub.status.busy": "2025-06-05T12:32:47.988465Z",
     "iopub.status.idle": "2025-06-05T12:32:57.269923Z",
     "shell.execute_reply": "2025-06-05T12:32:57.268873Z"
    },
    "papermill": {
     "duration": 9.302395,
     "end_time": "2025-06-05T12:32:57.272731",
     "exception": false,
     "start_time": "2025-06-05T12:32:47.970336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV #cross validation\n",
    "import xgboost as xgb\n",
    "\n",
    "# xgb_clf = xgb.XGBClassifier(objective='binary:logistic', seed=42, early_stopping_rounds=10, \n",
    "#             eval_metric='aucpr')\n",
    "\n",
    "# xgb_clf.fit(X_train, y_train, verbose=True, eval_set=[(X_test, y_test)])\n",
    "\n",
    "# Range of n_estimators values to evaluate\n",
    "n_estimators_range = range(10, 110, 10)  # 10, 20, ..., 100\n",
    "\n",
    "# Lists to store training and validation accuracies\n",
    "train_accuracies = []\n",
    "validation_accuracies = []\n",
    "train_losses = []\n",
    "validation_losses = []\n",
    "# Loop through each n_estimators value\n",
    "for n_estimators in n_estimators_range:\n",
    "    # Initialize the XGBoost model with current n_estimators\n",
    "    xgb_clf = xgb.XGBClassifier(objective='binary:logistic', seed=42, \n",
    "                                n_estimators=n_estimators, early_stopping_rounds=10, \n",
    "                                eval_metric='aucpr')\n",
    "    \n",
    "    # Fit the model on training data with validation set for early stopping\n",
    "    xgb_clf.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=False)\n",
    "\n",
    "\n",
    "     # Training accuracy\n",
    "    y_train_preds = xgb_clf.predict(X_train)\n",
    "    train_accuracy = accuracy_score(y_train, y_train_preds)\n",
    "    train_accuracies.append(train_accuracy)\n",
    "    \n",
    "    # Validation accuracy\n",
    "    y_test_preds = xgb_clf.predict(X_test)\n",
    "    validation_accuracy = accuracy_score(y_test, y_test_preds)\n",
    "    validation_accuracies.append(validation_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "678e82a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:57.285877Z",
     "iopub.status.busy": "2025-06-05T12:32:57.285493Z",
     "iopub.status.idle": "2025-06-05T12:32:57.291841Z",
     "shell.execute_reply": "2025-06-05T12:32:57.290628Z"
    },
    "papermill": {
     "duration": 0.015114,
     "end_time": "2025-06-05T12:32:57.294224",
     "exception": false,
     "start_time": "2025-06-05T12:32:57.279110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert accuracies to losses (1 - accuracy)\n",
    "train_losses = [1 - acc for acc in train_accuracies]\n",
    "validation_losses = [1 - acc for acc in validation_accuracies]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "03237588",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:57.305550Z",
     "iopub.status.busy": "2025-06-05T12:32:57.305188Z",
     "iopub.status.idle": "2025-06-05T12:32:57.637155Z",
     "shell.execute_reply": "2025-06-05T12:32:57.635860Z"
    },
    "papermill": {
     "duration": 0.34029,
     "end_time": "2025-06-05T12:32:57.639399",
     "exception": false,
     "start_time": "2025-06-05T12:32:57.299109",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# # Plot the Log Loss Graph\n",
    "# plt.figure(figsize=(10, 6))\n",
    "# plt.plot(n_estimators_range, train_losses, label='Training Log Loss', marker='o', color='blue')\n",
    "# plt.plot(n_estimators_range, validation_losses, label='Validation Log Loss', marker='o', color='orange')\n",
    "# plt.xlabel('Number of Trees (n_estimators)')\n",
    "# plt.ylabel('Log Loss')\n",
    "# plt.title('Training and Validation Log Loss vs. Number of Trees')\n",
    "# plt.legend()\n",
    "# plt.grid(True)\n",
    "# plt.show()\n",
    "# Plot the Loss Graph\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(n_estimators_range, train_losses, label='Training Loss', marker='o', color='blue')\n",
    "plt.plot(n_estimators_range, validation_losses, label='Validation Loss', marker='o', color='orange')\n",
    "plt.xlabel('Number of Trees (n_estimators)')\n",
    "plt.ylabel('Loss (1 - Accuracy)')\n",
    "plt.title('Training and Validation Loss vs. Number of Trees')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c353e920",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:57.652189Z",
     "iopub.status.busy": "2025-06-05T12:32:57.651783Z",
     "iopub.status.idle": "2025-06-05T12:32:57.890111Z",
     "shell.execute_reply": "2025-06-05T12:32:57.888760Z"
    },
    "papermill": {
     "duration": 0.247781,
     "end_time": "2025-06-05T12:32:57.892684",
     "exception": false,
     "start_time": "2025-06-05T12:32:57.644903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# # Plot the Accuracy Graph\n",
    "# plt.figure(figsize=(10, 6))\n",
    "# plt.plot(n_estimators_range, train_accuracies, label='Training Accuracy', marker='o', color='blue')\n",
    "# plt.plot(n_estimators_range, validation_accuracies, label='Validation Accuracy', marker='o', color='orange')\n",
    "# plt.xlabel('Number of Trees (n_estimators)')\n",
    "# plt.ylabel('Accuracy')\n",
    "# plt.title('Training and Validation Accuracy vs. Number of Trees')\n",
    "# plt.legend()\n",
    "# plt.grid(True)\n",
    "# plt.show()\n",
    "# Plot the Accuracy Graph\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(n_estimators_range, train_accuracies, label='Training Accuracy', marker='o', color='blue')\n",
    "plt.plot(n_estimators_range, validation_accuracies, label='Validation Accuracy', marker='o', color='orange')\n",
    "plt.xlabel('Number of Trees (n_estimators)')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Training and Validation Accuracy vs. Number of Trees')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2f55c294",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:57.907358Z",
     "iopub.status.busy": "2025-06-05T12:32:57.906910Z",
     "iopub.status.idle": "2025-06-05T12:32:57.982206Z",
     "shell.execute_reply": "2025-06-05T12:32:57.980566Z"
    },
    "papermill": {
     "duration": 0.085503,
     "end_time": "2025-06-05T12:32:57.984804",
     "exception": false,
     "start_time": "2025-06-05T12:32:57.899301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 79.13%\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.66      0.78     12830\n",
      "           1       0.68      0.97      0.80      9711\n",
      "\n",
      "    accuracy                           0.79     22541\n",
      "   macro avg       0.82      0.81      0.79     22541\n",
      "weighted avg       0.84      0.79      0.79     22541\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Predict and evaluate final model\n",
    "y_pred = xgb_clf.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy * 100:.2f}%\")\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7207681",
   "metadata": {
    "papermill": {
     "duration": 0.005764,
     "end_time": "2025-06-05T12:32:57.996770",
     "exception": false,
     "start_time": "2025-06-05T12:32:57.991006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.093327,
   "end_time": "2025-06-05T12:32:58.725438",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-05T12:32:37.632111",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
