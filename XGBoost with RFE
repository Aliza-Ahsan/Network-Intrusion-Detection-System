{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "17fcfd5c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:16.711374Z",
     "iopub.status.busy": "2025-06-05T12:32:16.710933Z",
     "iopub.status.idle": "2025-06-05T12:32:19.870630Z",
     "shell.execute_reply": "2025-06-05T12:32:19.869447Z"
    },
    "papermill": {
     "duration": 3.171224,
     "end_time": "2025-06-05T12:32:19.873585",
     "exception": false,
     "start_time": "2025-06-05T12:32:16.702361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import accuracy_score\n",
    "import itertools\n",
    "from tabulate import tabulate\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import itertools\n",
    "from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.metrics import accuracy_score, classification_report, log_loss\n",
    "import xgboost as xgb\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "102e71a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:19.886227Z",
     "iopub.status.busy": "2025-06-05T12:32:19.885008Z",
     "iopub.status.idle": "2025-06-05T12:32:19.892359Z",
     "shell.execute_reply": "2025-06-05T12:32:19.890939Z"
    },
    "papermill": {
     "duration": 0.015974,
     "end_time": "2025-06-05T12:32:19.894643",
     "exception": false,
     "start_time": "2025-06-05T12:32:19.878669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load the training and test datasets\n",
    "train_url = 'https://raw.githubusercontent.com/merteroglu/NSL-KDD-Network-Instrusion-Detection/master/NSL_KDD_Train.csv'\n",
    "test_url = 'https://raw.githubusercontent.com/merteroglu/NSL-KDD-Network-Instrusion-Detection/master/NSL_KDD_Test.csv'\n",
    "col_names = [\"duration\",\"protocol_type\",\"service\",\"flag\",\"src_bytes\",\n",
    "    \"dst_bytes\",\"land\",\"wrong_fragment\",\"urgent\",\"hot\",\"num_failed_logins\",\n",
    "    \"logged_in\",\"num_compromised\",\"root_shell\",\"su_attempted\",\"num_root\",\n",
    "    \"num_file_creations\",\"num_shells\",\"num_access_files\",\"num_outbound_cmds\",\n",
    "    \"is_host_login\",\"is_guest_login\",\"count\",\"srv_count\",\"serror_rate\",\n",
    "    \"srv_serror_rate\",\"rerror_rate\",\"srv_rerror_rate\",\"same_srv_rate\",\n",
    "    \"diff_srv_rate\",\"srv_diff_host_rate\",\"dst_host_count\",\"dst_host_srv_count\",\n",
    "    \"dst_host_same_srv_rate\",\"dst_host_diff_srv_rate\",\"dst_host_same_src_port_rate\",\n",
    "    \"dst_host_srv_diff_host_rate\",\"dst_host_serror_rate\",\"dst_host_srv_serror_rate\",\n",
    "    \"dst_host_rerror_rate\",\"dst_host_srv_rerror_rate\",\"label\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b3483992",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:19.906898Z",
     "iopub.status.busy": "2025-06-05T12:32:19.905892Z",
     "iopub.status.idle": "2025-06-05T12:32:21.382116Z",
     "shell.execute_reply": "2025-06-05T12:32:21.380710Z"
    },
    "papermill": {
     "duration": 1.485147,
     "end_time": "2025-06-05T12:32:21.384666",
     "exception": false,
     "start_time": "2025-06-05T12:32:19.899519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimensions of the Training set: (125973, 42)\n",
      "Dimensions of the Test set: (22544, 42)\n"
     ]
    }
   ],
   "source": [
    "train = pd.read_csv(train_url, header=None, names=col_names)\n",
    "test = pd.read_csv(test_url, header=None, names=col_names)\n",
    "print('Dimensions of the Training set:',train.shape)\n",
    "print('Dimensions of the Test set:',test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ca4a6ee9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:21.396359Z",
     "iopub.status.busy": "2025-06-05T12:32:21.395888Z",
     "iopub.status.idle": "2025-06-05T12:32:21.452031Z",
     "shell.execute_reply": "2025-06-05T12:32:21.450638Z"
    },
    "papermill": {
     "duration": 0.064907,
     "end_time": "2025-06-05T12:32:21.454762",
     "exception": false,
     "start_time": "2025-06-05T12:32:21.389855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label\n",
      "normal       67343\n",
      "anomalous    58630\n",
      "Name: count, dtype: int64\n",
      "\n",
      "label\n",
      "anomalous    12833\n",
      "normal        9711\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Label adjustment\n",
    "train[\"label\"] = train[\"label\"].apply(lambda x: \"normal\" if x == \"normal\" else \"anomalous\")\n",
    "test[\"label\"] = test[\"label\"].apply(lambda x: \"normal\" if x == \"normal\" else \"anomalous\")\n",
    "# Checking the distribution after the change\n",
    "print(train[\"label\"].value_counts())\n",
    "print()\n",
    "print(test[\"label\"].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "59f9d7f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:21.466435Z",
     "iopub.status.busy": "2025-06-05T12:32:21.465967Z",
     "iopub.status.idle": "2025-06-05T12:32:21.602109Z",
     "shell.execute_reply": "2025-06-05T12:32:21.600818Z"
    },
    "papermill": {
     "duration": 0.145034,
     "end_time": "2025-06-05T12:32:21.604842",
     "exception": false,
     "start_time": "2025-06-05T12:32:21.459808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicate rows: 9\n"
     ]
    }
   ],
   "source": [
    "print(f\"Number of duplicate rows: {train.duplicated().sum()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "708baf0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:21.617714Z",
     "iopub.status.busy": "2025-06-05T12:32:21.617266Z",
     "iopub.status.idle": "2025-06-05T12:32:21.656268Z",
     "shell.execute_reply": "2025-06-05T12:32:21.654833Z"
    },
    "papermill": {
     "duration": 0.04999,
     "end_time": "2025-06-05T12:32:21.659787",
     "exception": false,
     "start_time": "2025-06-05T12:32:21.609797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicate rows: 3\n"
     ]
    }
   ],
   "source": [
    "print(f\"Number of duplicate rows: {test.duplicated().sum()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3e8a72bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:21.673133Z",
     "iopub.status.busy": "2025-06-05T12:32:21.672679Z",
     "iopub.status.idle": "2025-06-05T12:32:21.709895Z",
     "shell.execute_reply": "2025-06-05T12:32:21.708809Z"
    },
    "papermill": {
     "duration": 0.046495,
     "end_time": "2025-06-05T12:32:21.712577",
     "exception": false,
     "start_time": "2025-06-05T12:32:21.666082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New shape of the dataset: (22541, 42)\n"
     ]
    }
   ],
   "source": [
    "# Removing duplicate rows\n",
    "test.drop_duplicates(inplace=True)\n",
    "\n",
    "# Check the shape of the dataset after removing duplicates\n",
    "print(f\"New shape of the dataset: {test.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "544fcc64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:21.725207Z",
     "iopub.status.busy": "2025-06-05T12:32:21.724807Z",
     "iopub.status.idle": "2025-06-05T12:32:21.859905Z",
     "shell.execute_reply": "2025-06-05T12:32:21.858325Z"
    },
    "papermill": {
     "duration": 0.144251,
     "end_time": "2025-06-05T12:32:21.862339",
     "exception": false,
     "start_time": "2025-06-05T12:32:21.718088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New shape of the dataset: (125964, 42)\n"
     ]
    }
   ],
   "source": [
    "# Removing duplicate rows\n",
    "train.drop_duplicates(inplace=True)\n",
    "\n",
    "# Check the shape of the dataset after removing duplicates\n",
    "print(f\"New shape of the dataset: {train.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "51cbce20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:21.873992Z",
     "iopub.status.busy": "2025-06-05T12:32:21.873569Z",
     "iopub.status.idle": "2025-06-05T12:32:21.897544Z",
     "shell.execute_reply": "2025-06-05T12:32:21.896197Z"
    },
    "papermill": {
     "duration": 0.032861,
     "end_time": "2025-06-05T12:32:21.900213",
     "exception": false,
     "start_time": "2025-06-05T12:32:21.867352",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns with the same value across all rows: ['num_outbound_cmds']\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming df is your DataFrame\n",
    "def check_constant_columns(test):\n",
    "    constant_columns = [col for col in test.columns if test[col].nunique() == 1]\n",
    "    return constant_columns\n",
    "\n",
    "# Example usage\n",
    "constant_cols = check_constant_columns(test)\n",
    "if constant_cols:\n",
    "    print(f\"Columns with the same value across all rows: {constant_cols}\")\n",
    "else:\n",
    "    print(\"No columns have the same value across all rows.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e6f2f1dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:21.912929Z",
     "iopub.status.busy": "2025-06-05T12:32:21.912553Z",
     "iopub.status.idle": "2025-06-05T12:32:21.940992Z",
     "shell.execute_reply": "2025-06-05T12:32:21.939632Z"
    },
    "papermill": {
     "duration": 0.037955,
     "end_time": "2025-06-05T12:32:21.943607",
     "exception": false,
     "start_time": "2025-06-05T12:32:21.905652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Dropping a column because every value is 0 \n",
    "train.drop(['num_outbound_cmds'], axis=1, inplace=True)\n",
    "test.drop(['num_outbound_cmds'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d66b0be1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:21.955625Z",
     "iopub.status.busy": "2025-06-05T12:32:21.955268Z",
     "iopub.status.idle": "2025-06-05T12:32:22.073504Z",
     "shell.execute_reply": "2025-06-05T12:32:22.072428Z"
    },
    "papermill": {
     "duration": 0.127004,
     "end_time": "2025-06-05T12:32:22.075959",
     "exception": false,
     "start_time": "2025-06-05T12:32:21.948955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Apply LabelEncoding\n",
    "def LabelEncoding(df):\n",
    "    for col in df.columns:\n",
    "        if df[col].dtype == 'object':\n",
    "            label_encoder = LabelEncoder()\n",
    "            df[col] = label_encoder.fit_transform(df[col])\n",
    "\n",
    "LabelEncoding(train)\n",
    "LabelEncoding(test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7ffcf81f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:22.088111Z",
     "iopub.status.busy": "2025-06-05T12:32:22.087171Z",
     "iopub.status.idle": "2025-06-05T12:32:22.108115Z",
     "shell.execute_reply": "2025-06-05T12:32:22.107014Z"
    },
    "papermill": {
     "duration": 0.029913,
     "end_time": "2025-06-05T12:32:22.110883",
     "exception": false,
     "start_time": "2025-06-05T12:32:22.080970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train = train.drop([\"label\"], axis=1)\n",
    "y_train = train[\"label\"]\n",
    "X_test = test.drop([\"label\"], axis=1)\n",
    "y_test = test[\"label\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3047e9ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:32:22.123876Z",
     "iopub.status.busy": "2025-06-05T12:32:22.123010Z",
     "iopub.status.idle": "2025-06-05T12:38:01.737470Z",
     "shell.execute_reply": "2025-06-05T12:38:01.736317Z"
    },
    "papermill": {
     "duration": 339.624052,
     "end_time": "2025-06-05T12:38:01.740320",
     "exception": false,
     "start_time": "2025-06-05T12:32:22.116268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature selection with RFE\n",
    "rfc = RandomForestClassifier()\n",
    "rfe = RFE(rfc, n_features_to_select=10)\n",
    "rfe.fit(X_train, y_train)\n",
    "selected_features = [f for f, s in zip(X_train.columns, rfe.support_) if s]\n",
    "X_train = X_train[selected_features]\n",
    "X_test = X_test[selected_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "40e2e961",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:38:01.754024Z",
     "iopub.status.busy": "2025-06-05T12:38:01.752842Z",
     "iopub.status.idle": "2025-06-05T12:38:01.758021Z",
     "shell.execute_reply": "2025-06-05T12:38:01.756938Z"
    },
    "papermill": {
     "duration": 0.014697,
     "end_time": "2025-06-05T12:38:01.760643",
     "exception": false,
     "start_time": "2025-06-05T12:38:01.745946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Define parameter ranges\n",
    "# n_estimators_range = [10, 20, 50, 70]\n",
    "\n",
    "# train_losses = []\n",
    "# validation_losses = []\n",
    "# train_accuracies = []\n",
    "# validation_accuracies = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7531cc6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:38:01.773630Z",
     "iopub.status.busy": "2025-06-05T12:38:01.773191Z",
     "iopub.status.idle": "2025-06-05T12:38:08.016411Z",
     "shell.execute_reply": "2025-06-05T12:38:08.015187Z"
    },
    "papermill": {
     "duration": 6.252875,
     "end_time": "2025-06-05T12:38:08.019187",
     "exception": false,
     "start_time": "2025-06-05T12:38:01.766312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV #cross validation\n",
    "import xgboost as xgb\n",
    "\n",
    "# xgb_clf = xgb.XGBClassifier(objective='binary:logistic', seed=42, early_stopping_rounds=10, \n",
    "#             eval_metric='aucpr')\n",
    "\n",
    "# xgb_clf.fit(X_train, y_train, verbose=True, eval_set=[(X_test, y_test)])\n",
    "\n",
    "# Range of n_estimators values to evaluate\n",
    "n_estimators_range = range(10, 110, 10)  # 10, 20, ..., 100\n",
    "\n",
    "# Lists to store training and validation accuracies\n",
    "train_accuracies = []\n",
    "validation_accuracies = []\n",
    "train_losses = []\n",
    "validation_losses = []\n",
    "# Loop through each n_estimators value\n",
    "for n_estimators in n_estimators_range:\n",
    "    # Initialize the XGBoost model with current n_estimators\n",
    "    xgb_clf = xgb.XGBClassifier(objective='binary:logistic', seed=42, \n",
    "                                n_estimators=n_estimators, early_stopping_rounds=10, \n",
    "                                eval_metric='aucpr')\n",
    "    \n",
    "    # Fit the model on training data with validation set for early stopping\n",
    "    xgb_clf.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=False)\n",
    "\n",
    "\n",
    "     # Training accuracy\n",
    "    y_train_preds = xgb_clf.predict(X_train)\n",
    "    train_accuracy = accuracy_score(y_train, y_train_preds)\n",
    "    train_accuracies.append(train_accuracy)\n",
    "    \n",
    "    # Validation accuracy\n",
    "    y_test_preds = xgb_clf.predict(X_test)\n",
    "    validation_accuracy = accuracy_score(y_test, y_test_preds)\n",
    "    validation_accuracies.append(validation_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b0c0281f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:38:08.031488Z",
     "iopub.status.busy": "2025-06-05T12:38:08.031026Z",
     "iopub.status.idle": "2025-06-05T12:38:08.036961Z",
     "shell.execute_reply": "2025-06-05T12:38:08.035772Z"
    },
    "papermill": {
     "duration": 0.014914,
     "end_time": "2025-06-05T12:38:08.039464",
     "exception": false,
     "start_time": "2025-06-05T12:38:08.024550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert accuracies to losses (1 - accuracy)\n",
    "train_losses = [1 - acc for acc in train_accuracies]\n",
    "validation_losses = [1 - acc for acc in validation_accuracies]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7c8c5a67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:38:08.051873Z",
     "iopub.status.busy": "2025-06-05T12:38:08.051412Z",
     "iopub.status.idle": "2025-06-05T12:38:08.371554Z",
     "shell.execute_reply": "2025-06-05T12:38:08.370250Z"
    },
    "papermill": {
     "duration": 0.329434,
     "end_time": "2025-06-05T12:38:08.374084",
     "exception": false,
     "start_time": "2025-06-05T12:38:08.044650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# # Plot the Log Loss Graph\n",
    "# plt.figure(figsize=(10, 6))\n",
    "# plt.plot(n_estimators_range, train_losses, label='Training Log Loss', marker='o', color='blue')\n",
    "# plt.plot(n_estimators_range, validation_losses, label='Validation Log Loss', marker='o', color='orange')\n",
    "# plt.xlabel('Number of Trees (n_estimators)')\n",
    "# plt.ylabel('Log Loss')\n",
    "# plt.title('Training and Validation Log Loss vs. Number of Trees')\n",
    "# plt.legend()\n",
    "# plt.grid(True)\n",
    "# plt.show()\n",
    "# Plot the Loss Graph\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(n_estimators_range, train_losses, label='Training Loss', marker='o', color='blue')\n",
    "plt.plot(n_estimators_range, validation_losses, label='Validation Loss', marker='o', color='orange')\n",
    "plt.xlabel('Number of Trees (n_estimators)')\n",
    "plt.ylabel('Loss (1 - Accuracy)')\n",
    "plt.title('Training and Validation Loss vs. Number of Trees')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2d097373",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:38:08.388005Z",
     "iopub.status.busy": "2025-06-05T12:38:08.387554Z",
     "iopub.status.idle": "2025-06-05T12:38:08.638466Z",
     "shell.execute_reply": "2025-06-05T12:38:08.637156Z"
    },
    "papermill": {
     "duration": 0.261129,
     "end_time": "2025-06-05T12:38:08.641260",
     "exception": false,
     "start_time": "2025-06-05T12:38:08.380131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# # Plot the Accuracy Graph\n",
    "# plt.figure(figsize=(10, 6))\n",
    "# plt.plot(n_estimators_range, train_accuracies, label='Training Accuracy', marker='o', color='blue')\n",
    "# plt.plot(n_estimators_range, validation_accuracies, label='Validation Accuracy', marker='o', color='orange')\n",
    "# plt.xlabel('Number of Trees (n_estimators)')\n",
    "# plt.ylabel('Accuracy')\n",
    "# plt.title('Training and Validation Accuracy vs. Number of Trees')\n",
    "# plt.legend()\n",
    "# plt.grid(True)\n",
    "# plt.show()\n",
    "# Plot the Accuracy Graph\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(n_estimators_range, train_accuracies, label='Training Accuracy', marker='o', color='blue')\n",
    "plt.plot(n_estimators_range, validation_accuracies, label='Validation Accuracy', marker='o', color='orange')\n",
    "plt.xlabel('Number of Trees (n_estimators)')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Training and Validation Accuracy vs. Number of Trees')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "94c90a5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:38:08.656612Z",
     "iopub.status.busy": "2025-06-05T12:38:08.656174Z",
     "iopub.status.idle": "2025-06-05T12:38:08.661488Z",
     "shell.execute_reply": "2025-06-05T12:38:08.660341Z"
    },
    "papermill": {
     "duration": 0.015426,
     "end_time": "2025-06-05T12:38:08.663687",
     "exception": false,
     "start_time": "2025-06-05T12:38:08.648261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Final model training and evaluation\n",
    "# xgb_clf = xgb.XGBClassifier(objective='binary:logistic', n_estimators=500, seed=42, eval_metric='logloss', use_label_encoder=False)\n",
    "# xgb_clf.fit(X_train, y_train, verbose=True, eval_set=[(X_test, y_test)], early_stopping_rounds=10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bae04ed7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-05T12:38:08.678154Z",
     "iopub.status.busy": "2025-06-05T12:38:08.677705Z",
     "iopub.status.idle": "2025-06-05T12:38:08.755869Z",
     "shell.execute_reply": "2025-06-05T12:38:08.754650Z"
    },
    "papermill": {
     "duration": 0.088246,
     "end_time": "2025-06-05T12:38:08.758421",
     "exception": false,
     "start_time": "2025-06-05T12:38:08.670175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 80.91%\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.69      0.80     12830\n",
      "           1       0.70      0.97      0.81      9711\n",
      "\n",
      "    accuracy                           0.81     22541\n",
      "   macro avg       0.83      0.83      0.81     22541\n",
      "weighted avg       0.85      0.81      0.81     22541\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Predict and evaluate final model\n",
    "y_pred = xgb_clf.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy * 100:.2f}%\")\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9e1ae79",
   "metadata": {
    "papermill": {
     "duration": 0.007729,
     "end_time": "2025-06-05T12:38:08.772858",
     "exception": false,
     "start_time": "2025-06-05T12:38:08.765129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 356.334435,
   "end_time": "2025-06-05T12:38:09.708995",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-05T12:32:13.374560",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
